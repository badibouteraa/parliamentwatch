<?php
/**
 * @file
 * Code for the Custom Blocks.
 */

/**
 * Implementation of hook_block_info
 * @return type 
 */

function pw_blocks_block_info(){
  $blocks['pw_taxonomy_menu'] = array(
    'info' => t('Parliamentwatch: Taxonomy Profile Menu'), 
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['pw_total_votes'] = array(
    'info' => t('PW: Total Votes per Poll'),
    //'cache' => DRUPAL_CA,
  );
  
  $blocks['pw_per_party_votes'] = array(
    'info' => t('PW: Total Votes per Party'),
    //'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  
  
  return $blocks;
}

/**
 * Implementation of hook_block_view
 * @param type $delta
 * @return type 
 */

function pw_blocks_block_view($delta = ''){
  $block = array();
  
  switch($delta){
    case 'pw_taxonomy_menu':
      if(is_numeric(arg(1))){
        $uid = arg(1);
        $tid = arg(2);
      }else{
        $uid = arg(2);
        $tid = arg(3);
      }
      
      $vid = variable_get('pw_blocks_taxonomy_menu_vid',4);
      $block['subject'] = t('Taxonomy Profile Menu');
      $block['content'] =  pw_blocks_get_accordian_data($uid , $tid , $vid);
    break;
    case 'pw_total_votes':
      if(is_numeric(arg(1))){
        $nid = arg(1);
      }else{
        $nid = arg(2);
      }
      
      $block['subject'] = 'chart test';
      $block['content'] = pw_blocks_get_chart($nid,'total');
    break;
    case 'pw_per_party_votes':
      if(is_numeric(arg(1))){
        $nid = arg(1);
      }else{
        $nid = arg(2);
      }
      $block['subject'] = 'chart party';
      $block['content'] = pw_blocks_get_chart($nid,'party');
    break;
    
  
  }
  
  return $block;
}

function pw_blocks_get_accordian_data($uid = NULL, $tid = NULL, $vid = NULL){
  $user = user_load($uid);
  /*$revs = user_revision_list($user);*/
  $results = db_select('field_revision_field_user_parliament','up')
  ->distinct()
  ->fields('up',array('field_user_parliament_tid','revision_id'))
  ->condition('entity_id',$uid,'=')
  ->execute()
  ->fetchAllAssoc('field_user_parliament_tid');
  $output = '<ul id="pw-taxonomy-menu">';
  foreach($results as $row){
    $term = taxonomy_term_load($row->field_user_parliament_tid);
    $output .= '<li class="pw-taxonomy-item">'.l($term->name,'user/'.$uid.'/revisions/'.$row->revision_id.'/view',array('title'=>$user->name)).'</li>';
  }
  $output .= '</ul>';
  return $output;
  
}

function pw_blocks_get_chart($nid = NULL, $type = 'total'){
  $output = '';
  $node = node_load($nid);
  $widgets = rate_get_active_widgets('node',$node->type);
  foreach($widgets[1]->options as $option){
    $options[$option[0]] = $option[1];
  }
  if($type == 'total'){
    $chart = array(
        '#title'=> 'CHART',
        '#type'=>CHART_TYPE_BAR_V,
        '#chart_id'=>$type,
        '#size' => chart_size(200, 200),
        '#adjust_resolution' => TRUE,
        //'#data' => array(),
        '#data_colors' => array('01cc00|ff3334|0033fe|555555'),
        '#labels' => array(),
        '#bar_size' => 'a',
        //'#mixed_axis_labels' => array(
          //CHART_AXIS_Y_LEFT => array(),
          //CHART_AXIS_X_TOP => array(),
      //),
    );
    $query = "SELECT count(vv.vote_id) as votes, vv.value , count(*) as total
              FROM votingapi_vote vv 
            WHERE entity_type = 'node'
              AND entity_id=:nid
             GROUP BY value";
    $args = array(
        ':nid' => $nid,
      );
    $result = db_query($query,$args);
    $max_count = 0;
    /*foreach($options as $key => $option){
        $chart['#legends'][$key] = $option;
      }*/
    $i = 0;
    while($rec = $result->fetchAssoc()){
      //print_r($rec);
      $chart['#legends'][$rec['value']] = $options[$rec['value']];
      $chart['#data'][$rec['value']] = $rec['votes'];
      $chart['#labels'][] = $rec['votes'];
      //$chart['#data_colors'][] = $colors[$i];
      //$chart['#shape_markers'][$options[$rec['value']]] = array('t'.$rec['votes'],'555555',0,-35,13);
      //$chart['#legends'][] = $options[$rec['value']];
      //$chart['#mixed_axis_labels'][CHART_AXIS_X_BOTTOM][1][] = chart_mixed_axis_label($options[$rec['value']]);
      if($rec['votes'] > $max_count){
        $max_count = $rec['votes'];
      }
      $i++;
    }
   $output = theme('chart', array('chart' => $chart));
   
  }else if($type == 'party'){
    
    //$groups = og_get_group_ids();

    $query = "select count(vv.uid) as votes , td.tid, td.name, vv.value from votingapi_vote vv 
              join field_data_field_user_party up on up.entity_id = vv.uid
              join taxonomy_term_data td on td.tid = up.field_user_party_tid
              where vv.entity_id = :nid
              group by  td.tid, vv.value";
    $args = array(
      ':nid' => $node->nid,
    );
    
    $result = db_query($query,$args);
    $gid = "";
    $chart = array();
    while($rec = $result->fetchAssoc()){
        
        $parties[$rec['tid']]['name'] = $rec['name'];
        $parties[$rec['tid']]['id'] = $rec['tid'];
        $parties[$rec['tid']]['data'][$rec['value']] = $rec['votes'];
      //$chart['#mixed_axis_labels'][CHART_AXIS_X_BOTTOM][1][] = chart_mixed_axis_label($options[$rec['value']]);
        $parties[$rec['tid']]['labels'][] = $rec['votes'];
        $parties[$rec['tid']]['legends'][$rec['value']] = $options[$rec['value']];
      
    }
    foreach($parties as $party){  
      $chart = array(
        '#title'=> $party['name'],
        '#type'=>CHART_TYPE_BAR_V,
        '#chart_id'=>$party['id'],
        '#size' => chart_size(200, 200),
        '#adjust_resolution' => TRUE,
        '#mixed_axis_labels' => array(
        CHART_AXIS_Y_LEFT => array(),
        CHART_AXIS_X_BOTTOM => array(),
        ),
        '#data_colors' => array('01cc00|ff3334|0033fe|555555'),
        '#labels' => array(),
        '#bar_size' => 'a',
        '#labels'=>$party['labels']
      );
      $chart['#legends'] = $party['legends'];
      /*foreach($options as $key =>$option){
        $chart['#legends'][$key] = $option;
        if(!$party['data'][$key]){
          $party['data'][$key] = 0;
        }
      }*/
      
      $chart['#data'] = $party['data'];
      $output .= theme('chart',array('chart'=>$chart));
    }
    
  }
  //$chart['#mixed_axis_labels'][CHART_AXIS_Y_LEFT][0][] = chart_mixed_axis_range_label(0, $max_count);
  //$chart['#bar_size'] = chart_bar_size(, 0);
  return $output;
}

/**
 *Implementation of hook_language_switch_links_alter
 * @param array $links
 * @param type $type
 * @param type $path
 * @return string 
 */

function pw_blocks_language_switch_links_alter(array &$links, $type, $path){

  foreach($links as $key => $link){
    $links[$key]['title'] = '<span class="locale-translated-name">'.t($link['language']->name) .'</span>&nbsp;<span class="locale-native-name">'.$link['language']->native.'</span>';
    $links[$key]['html'] = TRUE;
    
  }
  return $links;
}