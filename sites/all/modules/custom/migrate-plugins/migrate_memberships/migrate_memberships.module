<?php

/*
 * Implement hook_permission().
 */

function views_memberships_permission() {
  return array(
      'access migration' => array(
          'title' => t('Access Migration'),
          'description' => t('Access Migration'),
      )
  );
}

/*
 * Implement hook_menu()
 */

function migrate_memberships_menu() {
  $items = array();
  $items['admin/content/migrate_memberships'] = array(
      'page callback' => 'migrate_memberships_callback',
      'title' => 'Migrate Memberships',
      'access arguments' => array('access migration'),
      'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/*
 * Implement migrate_memberships_callback()
 */

function migrate_memberships_callback() {
  return drupal_get_form('migrate_memberships_form');
}

/*
 * Implement migrate_memberships_form()
 */

function migrate_memberships_form($form, &$form_state) {
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Migrate Memberships')
  );
  return $form;
}

/*
 * Implement migrate_memberships_form_submit()
 */

function migrate_memberships_form_submit($form, &$form_state) {

  // Get instance of previous migration
  $migration_user = MigrationBase::getInstance('politician');
  $migration_committee = MigrationBase::getInstance('committee');

  // Load all users with specific role (politician)
  $query = db_select('users', 'u');
  $query->join('users_roles', 'ur', 'u.uid = ur.uid');
  $query->join('role', 'r', 'ur.rid = r.rid');
  $query->fields('u', array('uid'));
  $query->condition('r.name', 'Politician', '=');
  $result = $query->execute();

  // Go through users with role politician
  while ($row = $result->fetchObject()) {

    // Load user
    $user = user_load($row->uid);

    // Get mapping to legacy user
    $migration_mapping = $migration_user->getMap()->lookupSourceID(array($user->uid));
    $legacy_uid = $migration_mapping['sourceid1'];

    // Load all profiles of legacy user exept the migrated one (see migrate_politician plugin)
    $legacy_query = Database::getConnection('default', 'parlamentwatch')
            ->select('legacy_membership', 'm');
    $legacy_query->fields('m');
    $legacy_query->condition('m.uid', $legacy_uid, '=');
    $legacy_result = $legacy_query->execute();

    // Go through legacy memberships
    while ($legacy_membership = $legacy_result->fetchObject()) {
      
      // Get mapping to legacy group (committe, constiuency, ...)
      switch ($legacy_membership->type) {
        case 'committee':
          $migration_mapping = $migration_committee->getMap()->lookupDestinationID(array($legacy_membership->gid));
          $dest_gid = $migration_mapping['destid1'];
          break;
      }
      $values = array(
          'name' => OG_MEMBERSHIP_TYPE_DEFAULT,
          'state' => OG_STATE_ACTIVE,
          'created' => time(),
      );
      #$check = db_query("SELECT id FROM og_membership WHERE etid = $uid AND gid = $gid")->fetchField();
      #if (empty($check)) {
      $membership = og_membership_create($dest_gid, 'user', $user->uid, array());
      og_membership_save($membership);
      #}
    }
    break;
  }
}

