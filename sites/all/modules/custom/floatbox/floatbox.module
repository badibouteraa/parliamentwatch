<?php

/**
 * @file
 * Floatbox allows site admin to add a text area field to a content type and enable Rich Text editor.
 */

// CONSTANTS
define('CONTENT_TYPE','blogpost_node_form'); // Node type for which we have to add this field. Currently selected is Article

function floatbox_help($path, $arg) {
  switch ($path) {
    case "admin/help#floatbox":
      return '<p>'.  t("Floatbox allows site admin to add a rich-text-editor enabled text area field to a content type.") .'</p>';
      break;
  }
} 

/**
 * Implements hook_form_alter().
 */
function floatbox_form_alter(&$form, &$form_state, $form_id) {
		
		//add css to customize the floatbox view
	
		$path	=	drupal_get_path('module','floatbox');
		drupal_add_css($path	.	'/floatbox.css');
  switch($form_id){
    case CONTENT_TYPE:
	  // Retrieve the default values for 'value' and 'format', if not readily
	  // available through other means:
	  $defaults = array(
	  'value' => '',
	  'format' => filter_default_format(),
	  );
	  
	  $floatbox_field = variable_get('floatbox', $defaults);
	  
	  $node = $form['#node'];
	  
      $form["floatbox"] = array(
        '#title' => 'Floatbox Contents',
	    '#description' => 'Please write contents that you would like to show in Floatbox with this content. You can use [floatbox] placeholder to display your content as well as you can use [floatbox=left] or [floatbox=right] or [floatbox=top] to display content to the respective side.',
        '#type' => 'text_format',
		'#default_value' => isset($node->floatbox) ? $node->floatbox : '',
		'#format' => $floatbox_field['format'],
      );
      break;
  }
  
  return $form;
}

/**
 * Implements hook_node_insert().
 */
function floatbox_node_insert($node) {
	if($node->form_id == CONTENT_TYPE) { // If Node Type matches our required Node type then execute
    db_insert('floatbox_fields')
    ->fields(array(
        'nid' => $node->nid,
        'text_value' => $node->floatbox['value'],
    ))
    ->execute();
	}
}

/**
 * Implements hook_node_view().
 */
function floatbox_node_view($node, $view_mode, $langcode) {
  $node_type = CONTENT_TYPE;
  $pos = strpos(CONTENT_TYPE,'_node_form');
  $node_type = substr($node_type,0,$pos);
  
  if ( ($node->type == $node_type) && ($view_mode != 'teaser')) { // If Node Type matches our required Node type then show AND view_mode not teaser
    if( isset($node->floatbox) && (!empty($node->floatbox)) ) { // if floatbox has contents
      $node->content['floatbox'] = array(
        '#markup' => theme('floatbox', array('floatbox' => $node->floatbox)), 
        '#weight' => 10,
      );
	}
  }
}

/**
 * Implements hook_node_load().
 */
function floatbox_node_load($nodes, $types) {
 $result = db_query('SELECT nid, text_value FROM {floatbox_fields} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->floatbox = $record->text_value;
  }
}


/**
 * Implements hook_node_update().
 */
function floatbox_node_update($node) {
  //if (variable_get('floatbox_node_type_' . $node->type, FALSE)) {
  if($node->form_id == CONTENT_TYPE) { // If Node Type matches our required Node type then execute
    // Check first if this node has a saved floatbox
    $floatbox = db_select('floatbox_fields', 'f')
      ->fields('f', array('nid'))
      ->where('f.nid = (:nid)', array(':nid' => $node->nid))
      ->execute()->fetchField();

    if ($floatbox) {
      // If floatbox exists
      db_update('floatbox_fields')
        ->fields(array('text_value' => $node->floatbox['value']))
        ->condition('nid', $node->nid)
        ->execute();
    }
    else {
      // If floatbox does not exist since before, then insert rather then updating
      floatbox_node_insert($node);
    }
  }
}

/**
 * Generate the output for the floatbox 
 */
function floatbox() {
	//if node id is available then continue using float box
	if (arg(0)=='node' && is_numeric(arg(1)) ){
	//getting nid of node
	$nid = arg(1);

	//getting node body value
	$body_value = db_query("SELECT body_value FROM field_data_body WHERE entity_id=$nid")->fetchAssoc();
	$body = $body_value['body_value'];
	//for floatbox value through node 
$floatbox = db_query("SELECT text_value FROM floatbox_fields WHERE nid=$nid")->fetchAssoc();
$floatbox= $floatbox['text_value'];
	

	//check the floatig side
	$rightSide = '[floatbox=right]';
	$right = strpos($body,$rightSide);
	$leftSide = '[floatbox=left]';
	$left = strpos($body,$leftSide);
	$topSide = '[floatbox=top]';
	$top = strpos($body,$topSide);
	$defaultSide = '[floatbox]';

	//apply the floatbox to the required content area (corner) left, right and so on
	if ($right!=""){
		 $floatbox = '<div id="floatbox" class="floatbox-right">'.$floatbox .'</div>';
   return @render(str_replace($rightSide,$floatbox,	$body));
	}
	elseif ($left!=""){
		 $floatbox = '<div id="floatbox" class="floatbox-left">'.$floatbox .'</div>';
   return @render(str_replace($leftSide,$floatbox,	$body));
	}
	else if ($top!=""){
		 $floatbox = '<div id="floatbox" class="floatbox-top">'.$floatbox .'</div>';
   return @render(str_replace($topSide,$floatbox,	$body));
	}
	else{
		 $floatbox = '<div id="floatbox" class="floatbox-top">'.$floatbox .'</div>';
   return  @render(str_replace($defaultSide,$floatbox,	$body));
	}
	}
}
